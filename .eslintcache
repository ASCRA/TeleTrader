[{"C:\\Users\\risti\\Desktop\\TeleTrader zadatak\\teletraderaplikacija\\src\\index.js":"1","C:\\Users\\risti\\Desktop\\TeleTrader zadatak\\teletraderaplikacija\\src\\GlavnaStrana.js":"2","C:\\Users\\risti\\Desktop\\TeleTrader zadatak\\teletraderaplikacija\\src\\Komponente\\Navbar.js":"3","C:\\Users\\risti\\Desktop\\TeleTrader zadatak\\teletraderaplikacija\\src\\Komponente\\Profile.js":"4","C:\\Users\\risti\\Desktop\\TeleTrader zadatak\\teletraderaplikacija\\src\\Komponente\\Home.js":"5","C:\\Users\\risti\\Desktop\\TeleTrader zadatak\\teletraderaplikacija\\src\\Komponente\\TableRow.js":"6","C:\\Users\\risti\\Desktop\\TeleTrader zadatak\\teletraderaplikacija\\src\\Komponente\\LogInContext.js":"7"},{"size":224,"mtime":1607792279840,"results":"8","hashOfConfig":"9"},{"size":1409,"mtime":1607887802187,"results":"10","hashOfConfig":"9"},{"size":2331,"mtime":1607888851343,"results":"11","hashOfConfig":"9"},{"size":2245,"mtime":1607879776795,"results":"12","hashOfConfig":"9"},{"size":1655,"mtime":1607872077083,"results":"13","hashOfConfig":"9"},{"size":1777,"mtime":1607872511378,"results":"14","hashOfConfig":"9"},{"size":103,"mtime":1607882984944,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"86n9ek",{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"18"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"C:\\Users\\risti\\Desktop\\TeleTrader zadatak\\teletraderaplikacija\\src\\index.js",[],["35","36"],"C:\\Users\\risti\\Desktop\\TeleTrader zadatak\\teletraderaplikacija\\src\\GlavnaStrana.js",["37"],"import {Navbar} from \"./Komponente/Navbar\";\nimport {Home} from \"./Komponente/Home\";\nimport {Profile} from \"./Komponente/Profile\";\nimport {useEffect, useState, useMemo} from \"react\"\nimport {Route, BrowserRouter, Switch, Redirect} from \"react-router-dom\"\nimport LogInContext from \"./Komponente/LogInContext\"\nfunction GlavnaStrana() {\n  const [loggedIn, setLoggedIn] = useState(localStorage.getItem('log-in')?localStorage.getItem('log-in'):'false')\n\n  useEffect(() => {\n      switch (localStorage.getItem('log-in')) {\n        case 'true':\n          setLoggedIn(true)\n          break;\n        case 'false':\n          setLoggedIn(false) \n          break;\n        default:\n          {\n            localStorage.setItem('log-in', false)\n            setLoggedIn(false)\n          }\n        break;\n      }\n  }, [])\n\n  const logIn = () => {\n    setLoggedIn(true);\n    localStorage.setItem('log-in', true);\n  }\n\n  const isLoggedIn = useMemo(() => ({\n    loggedIn,\n    logIn\n  }), [loggedIn])\n\n  return (\n    <div>\n      <BrowserRouter>\n        <LogInContext.Provider value = {isLoggedIn}>\n          <Navbar/>\n        </LogInContext.Provider>\n          <Switch>\n            <Route path = \"/\" exact component={Home} />\n            {loggedIn? <Route path = \"/profile\" exact component={Profile} />:<Redirect from='/profile' to=\"/\" />}\n          </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default GlavnaStrana;\n","C:\\Users\\risti\\Desktop\\TeleTrader zadatak\\teletraderaplikacija\\src\\Komponente\\Navbar.js",["38","39"],"C:\\Users\\risti\\Desktop\\TeleTrader zadatak\\teletraderaplikacija\\src\\Komponente\\Profile.js",["40"],"import styled from \"styled-components\";\r\nimport {useState, useEffect} from \"react\"\r\n\r\nconst ProfileDiv = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: left;\r\n    margin-left: 10%;\r\n    width: 260px;\r\n    font-size: 1rem;\r\n    p{\r\n        font-size: 0.775rem;\r\n        margin-top: 0.2rem;\r\n    }\r\n`;\r\n\r\nconst ProfileImage = styled.img`\r\n    width: 50%;\r\n`;\r\n\r\nconst Button = styled.button`\r\n    border: none;\r\n    border-radius: 2px;\r\n    padding: 10px;\r\n    background-color: ${props => props.color || '#1455d9'};\r\n    color: white;\r\n    width: 40%;\r\n    visibility: ${props => props.visibility || 'visible'};\r\n    &:focus{\r\n        outline:none;\r\n    }\r\n`;\r\n\r\nexport let Profile = () => {\r\n    let [avatar, setAvatar] = useState(localStorage.getItem('avatar'))\r\n    let [buttonColor, setButtonColor] = useState(\"#1455d9\")\r\n\r\n    useEffect(() => {\r\n        if(localStorage.getItem('avatar') === null)\r\n        {\r\n            localStorage.setItem('avatar', './images/MojaSlika.jpg')\r\n            setAvatar(localStorage.getItem('avatar'))\r\n            setButtonColor('#1455d9')\r\n        }\r\n        else\r\n        {\r\n            if(avatar === 'https://api.hello-avatar.com/adorables/285/sibircina@gmail.com')\r\n            {\r\n                setButtonColor('#25c2a1')\r\n            }\r\n        }\r\n    }, [])\r\n\r\n    const changeAvatar = () => {\r\n        if(avatar === 'https://api.hello-avatar.com/adorables/285/sibircina@gmail.com')\r\n            {\r\n                localStorage.setItem('avatar', './images/MojaSlika.jpg')\r\n                setButtonColor('#1455d9');\r\n            }\r\n        else\r\n            {\r\n                localStorage.setItem('avatar', 'https://api.hello-avatar.com/adorables/285/sibircina@gmail.com')\r\n                setButtonColor('#25c2a1');\r\n            }\r\n        \r\n        setAvatar(localStorage.getItem('avatar'))\r\n    }\r\n\r\n    return(\r\n        <ProfileDiv>\r\n            <ProfileImage src = {avatar}></ProfileImage>\r\n            <b>Stefan Ristic</b>\r\n            <p>\r\n                ristic.stefan@outlook.com\r\n                https://github.com/ASCRA\r\n            </p>\r\n            <Button onClick={changeAvatar} color={buttonColor}>Toggle Avatar</Button>\r\n        </ProfileDiv>\r\n    )\r\n}","C:\\Users\\risti\\Desktop\\TeleTrader zadatak\\teletraderaplikacija\\src\\Komponente\\Home.js",["41"],"import { TableRow } from \"./TableRow\";\r\nimport {useState} from \"react\"\r\nimport styled from \"styled-components\";\r\n\r\nconst Table = styled.table`\r\n    margin: 0 auto;\r\n    border-collapse: collapse;\r\n    border-spacing: 0 10px; \r\n    background-color: #165575;\r\n    color: white;\r\n    width: auto;\r\n    th, td{\r\n        border-bottom: 1px solid white;\r\n        width: auto;\r\n        padding: 10px 20px 10px 10px;\r\n    }\r\n    thead > tr{\r\n        font-weight: bold;\r\n    }\r\n    tr:hover{\r\n        background-color: #258ac1;\r\n        cursor: pointer;\r\n    }\r\n`;\r\nexport const Home = () =>{\r\n    const [tableValues, setTableValues] = useState(\r\n        [\"BTCUSD\", \r\n         \"BTCEUR\", \r\n         \"ETHUSD\",\r\n         \"ETHEUR\", \r\n         \"EOSUSD\"]);\r\n\r\n    return(\r\n        <div>\r\n            <Table>\r\n                <thead>\r\n                    <tr>\r\n                        <td>\r\n                            Num\r\n                        </td>\r\n                        <td>\r\n                            Symbol\r\n                        </td>\r\n                        <td>\r\n                            Daily change\r\n                        </td>\r\n                        <td>\r\n                            Volume\r\n                        </td>\r\n                        <td>\r\n                            Last price\r\n                        </td>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {tableValues.map((value, index) => (\r\n                        <TableRow key={value} symbol={value} index = {index + 1}/>\r\n                    ))}\r\n                </tbody>\r\n            </Table>\r\n        </div>\r\n    )\r\n}","C:\\Users\\risti\\Desktop\\TeleTrader zadatak\\teletraderaplikacija\\src\\Komponente\\TableRow.js",["42","43"],"import { useEffect, useState } from \"react\";\r\n\r\nexport let TableRow = (props) =>{\r\n    let [message, setMessage] = useState([]);\r\n    let [request, setRequest] = useState(JSON.stringify({\r\n        event: 'subscribe',\r\n        channel: 'ticker',\r\n        symbol: `t${props.symbol}`\r\n    }))\r\n\r\n    useEffect(() => {\r\n        const timer = setTimeout(() => {\r\n            connect();\r\n        }, 1000);\r\n        return () => {\r\n            clearTimeout(timer);\r\n        }\r\n    }, [])\r\n\r\n    let connect = () => {\r\n        const ws = new WebSocket('wss://api-pub.bitfinex.com/ws/2');\r\n\r\n            ws.onopen = () => {\r\n                ws.send(request);\r\n            }\r\n\r\n            ws.onmessage = (msg) => {\r\n                if(Array.isArray(JSON.parse(msg.data)[1]))\r\n                    {\r\n                        setMessage(JSON.parse(msg.data));\r\n                    }\r\n            }\r\n            \r\n            ws.onerror = err => {\r\n                const timer = setTimeout(() => {\r\n                    ws.close();\r\n                    connect();\r\n                }, 1000);\r\n                return () => {\r\n                    clearTimeout(timer);\r\n                }\r\n            };\r\n    };\r\n\r\n    if(message.length > 1)\r\n    return(\r\n            <tr>\r\n                <td><b>{props.index}</b></td>\r\n                <td>{props.symbol}</td>\r\n                <td>{(message[1][5]*100).toFixed(2)}%</td>\r\n                <td>{(message[1][7]).toFixed(2)}</td>\r\n                <td>{(message[1][6]).toFixed(2)}</td> \r\n            </tr>\r\n    )\r\n    else\r\n    return(\r\n        <tr>\r\n            <td><b>{props.index}</b></td>\r\n            <td>{props.symbol}</td>\r\n            <td>Loading..</td>\r\n            <td>Loading..</td>\r\n            <td>Loading..</td>\r\n        </tr>\r\n    )\r\n}","C:\\Users\\risti\\Desktop\\TeleTrader zadatak\\teletraderaplikacija\\src\\Komponente\\LogInContext.js",[],{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":19,"column":11,"nodeType":"50","messageId":"51","endLine":22,"endColumn":12},{"ruleId":"52","severity":1,"message":"53","line":3,"column":9,"nodeType":"54","messageId":"55","endLine":3,"endColumn":18},{"ruleId":"52","severity":1,"message":"56","line":3,"column":20,"nodeType":"54","messageId":"55","endLine":3,"endColumn":28},{"ruleId":"57","severity":1,"message":"58","line":52,"column":8,"nodeType":"59","endLine":52,"endColumn":10,"suggestions":"60"},{"ruleId":"52","severity":1,"message":"61","line":26,"column":25,"nodeType":"54","messageId":"55","endLine":26,"endColumn":39},{"ruleId":"52","severity":1,"message":"62","line":5,"column":19,"nodeType":"54","messageId":"55","endLine":5,"endColumn":29},{"ruleId":"57","severity":1,"message":"63","line":18,"column":8,"nodeType":"59","endLine":18,"endColumn":10,"suggestions":"64"},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'avatar'. Either include it or remove the dependency array.","ArrayExpression",["67"],"'setTableValues' is assigned a value but never used.","'setRequest' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'connect'. Either include it or remove the dependency array.",["68"],"no-global-assign","no-unsafe-negation",{"desc":"69","fix":"70"},{"desc":"71","fix":"72"},"Update the dependencies array to be: [avatar]",{"range":"73","text":"74"},"Update the dependencies array to be: [connect]",{"range":"75","text":"76"},[1330,1332],"[avatar]",[477,479],"[connect]"]